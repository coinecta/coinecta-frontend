generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String            @id @default(cuid())
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  name           String?
  status         String?
  isAdmin        Boolean           @default(false) @map("is_admin")
  defaultAddress String?           @unique @map("default_address")
  rewardAddress  String?           @unique @map("reward_address")
  walletType     String?
  nonce          String?
  email          String?           @unique
  emailVerified  DateTime?         @map("email_verified")
  image          String?
  sumsubId       String?           @map("sumsub_id")
  sumsubType     String?           @map("sumsub_type")
  sumsubResult   Json?             @map("sumsub_result")
  sumsubStatus   String?           @map("sumsub_status")
  accounts       Account[]
  sessions       Session[]
  transactions   Transaction[]
  wallets        Wallet[]
  whitelists     WhitelistSignup[]
  ergoProofs     ErgoProof[]

  @@map("users")
}

model UserStakeHistory {
  id                  Int    @id @default(autoincrement())
  active_epoch        Int
  amount              String
  pool_id             String
  user_reward_address String

  @@unique([active_epoch, user_reward_address, pool_id])
  @@index([active_epoch, user_reward_address, pool_id])
  @@map("user_stake_history")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  type            String
  rewardAddress   String   @map("reward_address")
  changeAddress   String   @map("change_address")
  unusedAddresses String[] @map("unused_addresses")
  usedAddresses   String[] @map("used_addresses")
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id                String            @id @default(cuid())
  description       String?
  amount            String
  currency          String
  address           String
  completed         Boolean           @default(false)
  txId              String?           @map("tx_id")
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  user_id           String
  user              User              @relation(fields: [user_id], references: [id])
  contribution_id   Int
  contributionRound ContributionRound @relation(fields: [contribution_id], references: [id])

  onChainTxData Json? @map("on_chain_tx_data")

  @@map("transactions")
}

model NewTx {
  id            String @id @default(cuid())
  txId          String
  onChainTxData Json?  @map("on_chain_tx_data")

  @@map("new_transactions")
}

model Project {
  id                 Int                 @id @default(autoincrement())
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  name               String              @unique
  slug               String              @unique
  shortDescription   String              @map("short_description")
  whitepaperLink     String?             @map("whitepaper_link")
  description        String
  blockchains        String[]
  fundsRaised        Int?                @map("funds_raised")
  bannerImgUrl       String              @map("banner_img_url")
  avatarImgUrl       String              @map("avatar_img_url")
  isLaunched         Boolean             @default(false) @map("is_launched")
  isDraft            Boolean             @default(true) @map("is_draft")
  frontPage          Boolean             @default(false) @map("front_page")
  fisos              Fiso[]
  roadmap            Roadmap[]
  socials            Socials?
  team               Team[]
  tokenomics         Tokenomics?
  whitelists         Whitelist[]
  contributionRounds ContributionRound[]

  @@map("projects")
}

model ContributionRound {
  id                  Int           @id @default(autoincrement())
  name                String
  saleType            String        @map("sale_type")
  startDate           DateTime      @map("start_date")
  endDate             DateTime      @map("end_date")
  tokenTicker         String        @map("token_ticker")
  tokenTarget         Int           @map("token_target")
  currency            String
  price               Float
  deposited           Float
  whitelistSlug       String?       @unique @map("whitelist_slug")
  whitelist           Whitelist?    @relation(fields: [whitelistSlug], references: [slug])
  Transaction         Transaction[]
  projectName         String        @map("project_name")
  projectSlug         String        @map("project_slug")
  project             Project       @relation(fields: [projectSlug], references: [slug], onDelete: Cascade)
  recipientAddress    String?       @map("recipient_address")
  restrictedCountries String[]      @map("restricted_countries")
  saleTerms           String?

  @@map("contribution_round")
}

model Socials {
  id           Int     @id @default(autoincrement())
  telegram     String?
  twitter      String?
  discord      String?
  github       String?
  website      String?
  project_slug String  @unique
  project      Project @relation(fields: [project_slug], references: [slug], onDelete: Cascade)

  @@map("project_socials")
}

model Roadmap {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  date         DateTime
  project_slug String
  project      Project  @relation(fields: [project_slug], references: [slug], onDelete: Cascade)

  @@map("project_roadmaps")
}

model Team {
  id            Int     @id @default(autoincrement())
  name          String
  description   String
  profileImgUrl String? @map("profile_img_url")
  twitter       String?
  linkedin      String?
  project_slug  String
  project       Project @relation(fields: [project_slug], references: [slug], onDelete: Cascade)

  @@map("project_team")
}

model Tokenomics {
  id           Int         @id @default(autoincrement())
  tokenName    String      @map("token_name")
  totalTokens  Int         @map("total_tokens")
  tokenTicker  String      @map("token_ticker")
  policyId     String?     @map("policy_id")
  project_slug String      @unique
  project      Project     @relation(fields: [project_slug], references: [slug], onDelete: Cascade)
  tokenomics   Tokenomic[]

  @@map("project_tokenomics")
}

model Tokenomic {
  id            Int        @id @default(autoincrement())
  name          String
  amount        Int
  value         String?
  tge           String?
  freq          String?
  length        String?
  lockup        String?
  walletAddress String?    @map("wallet_address")
  tokenomicsId  Int
  tokenomics    Tokenomics @relation(fields: [tokenomicsId], references: [id], onDelete: Cascade)

  @@map("project_tokenomics_items")
}

model Whitelist {
  id                String             @id @default(cuid())
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  name              String
  slug              String             @unique
  startDateTime     DateTime           @map("start_date_time")
  endDateTime       DateTime           @map("end_date_time")
  maxPerSignup      Int?               @map("max_per_signup")
  hardCap           Int?               @map("hard_cap")
  externalLink      String?            @map("external_link")
  ergoProofs        Boolean            @default(false) @map("ergo_proofs")
  project_slug      String
  signups           WhitelistSignup[]
  project           Project            @relation(fields: [project_slug], references: [slug], onDelete: Cascade)
  ContributionRound ContributionRound?

  @@map("whitelists")
}

model Fiso {
  id                 Int                     @id @default(autoincrement())
  tokenAmount        Int                     @map("token_amount")
  tokenName          String                  @map("token_name")
  tokenTicker        String                  @map("token_ticker")
  startEpoch         Int                     @map("start_epoch")
  endEpoch           Int                     @map("end_epoch")
  projectSlug        String                  @map("project_slug")
  totalStakeEpoch    Json?                   @map("total_stake_epoch")
  approvedStakepools FisoApprovedStakePool[]
  project            Project                 @relation(fields: [projectSlug], references: [slug])
  spoSignups         SpoSignups[]            @relation("FisoToSpoSignups")

  @@map("fisos")
}

model FisoApprovedStakePool {
  id         Int       @id @default(autoincrement())
  startEpoch Int       @map("start_epoch")
  endEpoch   Int       @map("end_epoch")
  fisoId     Int       @map("fiso_id")
  poolId     String    @map("pool_id")
  fiso       Fiso      @relation(fields: [fisoId], references: [id], onDelete: Cascade)
  stakepool  Stakepool @relation(fields: [poolId], references: [pool_id], onDelete: Cascade)

  @@map("fiso_approved_stake_pools")
}

model SpoSignups {
  id               Int       @id @default(autoincrement())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  poolId           String    @unique @map("pool_id")
  operatorName     String?   @map("operator_name")
  operatorEmail    String?   @map("operator_email")
  operatorTwitter  String?   @map("operator_twitter")
  operatorDiscord  String?   @map("operator_discord")
  operatorTelegram String?   @map("operator_telegram")
  stakepool        Stakepool @relation(fields: [poolId], references: [pool_id], onDelete: Cascade)
  fisos            Fiso[]    @relation("FisoToSpoSignups")

  @@map("spo_signups")
}

model Stakepool {
  id          Int                     @id @default(autoincrement())
  pool_id     String                  @unique
  hex         String?
  url         String?
  hash        String?
  ticker      String?
  name        String?
  description String?
  homepage    String?
  fisoPools   FisoApprovedStakePool[]
  spoSignups  SpoSignups?
  history     StakepoolHistory[]
  stats       StakepoolStats?

  @@map("stakepools")
}

model StakepoolStats {
  id              Int       @id @default(autoincrement())
  pool_id         String    @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  hex             String
  vrf_key         String
  blocks_minted   Int
  blocks_epoch    Int
  live_stake      String
  live_size       Float
  live_saturation Float
  live_delegators Int
  active_stake    String
  active_size     Float
  declared_pledge String
  live_pledge     String
  margin_cost     Float
  fixed_cost      String
  reward_account  String
  owners          String[]
  registration    String[]
  retirement      String[]
  stakepool       Stakepool @relation(fields: [pool_id], references: [pool_id], onDelete: Cascade)

  @@map("stakepool_stats")
}

model StakepoolDataCache {
  id         Int      @id @default(autoincrement())
  spoListKey String   @unique
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("stakepool_cache")
}

model StakepoolHistory {
  id               Int       @id @default(autoincrement())
  epoch            Int
  blocks           Int
  active_stake     String
  active_size      Float
  delegators_count Int
  rewards          String
  fees             String
  pool_id          String
  stakepool        Stakepool @relation(fields: [pool_id], references: [pool_id], onDelete: Cascade)

  @@unique([epoch, pool_id])
  @@index([epoch, pool_id])
  @@map("stakepool_history")
}

model HeroCarousel {
  id          Int     @id @default(autoincrement())
  title       String
  subtitle    String
  image       String?
  buttonTitle String  @map("button_title")
  buttonLink  String  @map("button_link")
  order       Int     @default(autoincrement())

  @@map("hero_carousel")
}

model WhitelistSignup {
  id              String    @id @default(cuid())
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  amountRequested String?   @map("amount_requested")
  amountApproved  String?   @map("amount_approved")
  status          String?
  notes           String?
  user_id         String
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  whitelist_slug  String
  whitelist       Whitelist @relation(fields: [whitelist_slug], references: [slug], onDelete: Cascade)

  @@map("whitelist_signups")
}

enum ProofStatus {
  INITIATED // no address yet
  PENDING // address is added
  SIGNED // Proof is signed
  VERIFIED // Proof is verified with a signed proof or on-chain transaction
  EXPIRED
}

model ErgoProof {
  id             Int         @id @default(autoincrement())
  addresses      String[]
  verificationId String      @unique @map("verification_id")
  nonce          String
  status         ProofStatus
  walletType     String?     @map("wallet_type")
  defaultAddress String?     @map("default_address")
  signedMessage  String?     @map("signed_message")
  proof          String?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  user_id        String
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CardanoPrice {
  id        Int      @id @default(autoincrement())
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cardano_price")
}
